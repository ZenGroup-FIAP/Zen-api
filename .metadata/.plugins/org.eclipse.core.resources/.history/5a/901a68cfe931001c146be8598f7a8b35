package br.com.zenSpaceOn.resource;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;

import br.com.zenSpaceOn.bo.PacienteBO;
import br.com.zenSpaceOn.to.PacienteTO;

@Path("/pacientes")
public class PacienteResource {
	private PacienteBO bo = new PacienteBO();
	
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<PacienteTO> listarTodos() {
		return bo.listar();
	}
	
	@GET
	@Path("/{codigo}")
	@Produces(MediaType.APPLICATION_JSON)
	public PacienteTO listarTodos(@PathParam("codigo") int codigo) {
		return bo.selecionar(codigo);
	}
	
	
	// CADASTRO
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public Response cadastrar(PacienteTO paciente, @Context UriInfo uriInfo) {
		List<PacienteTO> pacientes = bo.listar();
		List<Integer>codigosCadastrados = new ArrayList<>();
		int codigoPaciente = 0;
		
		for (PacienteTO p : pacientes) {
			codigosCadastrados.add(p.getCodigo());
		}
		
		while (codigosCadastrados.indexOf(codigoPaciente) != -1) {;
			codigoPaciente++;
		}
		
		paciente.setCodigo(codigoPaciente);
		bo.cadastrar(paciente);
		UriBuilder builder = uriInfo.getAbsolutePathBuilder();
		builder.path(Integer.toString(paciente.getCodigo()));
		return Response.created(builder.build()).build();
	}
	
	/* Rota de login
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public Boolean login(String email, String senha, @Context UriInfo uriInfo) {
		if (bo.autenticar(email, senha)) {
			return true;
		} else {
			return false;
		}
	}
	*/
}
